import telebot
from telebot import types
import random
import time
import json

bot = telebot.TeleBot('6035859101:AAEjqd24_RcN8fblJ_ZsS6ZD1_T3s1a34BI')

chapter = {}

with open('bot_chat_scripts/main_msgs.json', 'r', encoding='utf-8') as fh:
    messages_data = json.load(fh)

with open('jcts.json', 'r', encoding='utf-8') as fh:
    jcts_data = json.load(fh)


@bot.message_handler(commands=['start'])
def start(message):
    global chapter
    chapter[message.from_user.id] = 0

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–¥–∏–∞–±–µ—Ç üíâ")
    item2 = types.KeyboardButton("–∏—Ä ü©∏")
    item3 = types.KeyboardButton("–ø—Ä–æ–±–ª–µ–º—ã —Å –∂–∫—Ç üíä")
    item4 = types.KeyboardButton("—Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö üìù")
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>', reply_markup=markup, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–¥–∏–∞–±–µ—Ç üíâ')
def diabetes(message):
    global chapter
    chapter[message.from_user.id] = 0

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("—Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å")
    item2 = types.KeyboardButton("—Ç–∞–±–ª–∏—Ü–∞ –ì–ò")
    item3 = types.KeyboardButton("—á—Ç–æ –º–æ–∂–Ω–æ ‚úÖ")
    item4 = types.KeyboardButton("—á—Ç–æ –Ω–µ–ª—å–∑—è ‚ùå")
    item5 = types.KeyboardButton("—Å–∞—Ö–∞—Ä–æ–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏")
    item6 = types.KeyboardButton("–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí")
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(message.chat.id, messages_data['diabetes_text'], reply_markup=markup, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '—Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å')
def diet(message):
    try:
        if chapter[message.from_user.id] == 0 or chapter[message.from_user.id] == 1:
            breakfast_position = random.choice(list(jcts_data['breakfast_dia'].keys()))
            dinner_position = random.choice(list(jcts_data['dinner_dia'].keys()))
            supper_position = random.choice(list(jcts_data['supper_dia'].keys()))

            text_diet = "<b>–ó–∞–≤—Ç—Ä–∞–∫:</b>\n" \
                        f"{breakfast_position} ‚Üí <a href='{jcts_data['breakfast_dia'][breakfast_position]}'>—Ä–µ—Ü–µ–ø—Ç</a>\n\n" \
                        f"<b>–û–±–µ–¥:</b>\n" \
                        f"{dinner_position} ‚Üí <a href='{jcts_data['dinner_dia'][dinner_position]}'>—Ä–µ—Ü–µ–ø—Ç</a>\n\n" \
                        f"<b>–£–∂–∏–Ω:</b>\n" \
                        f"{supper_position} ‚Üí <a href='{jcts_data['supper_dia'][supper_position]}'>—Ä–µ—Ü–µ–ø—Ç</a>"
            bot.send_message(message.chat.id, text_diet, parse_mode='html')
            bot.send_message(message.chat.id,
                             messages_data['services_info'][f'attensions_{chapter[message.from_user.id]}'],
                             parse_mode='html')

        elif chapter[message.from_user.id] == 2:
            bot.send_message(message.chat.id, messages_data['services_info']['attensions_2'], parse_mode='html')

            breakfast_position = random.choice(list(jcts_data['breakfast_jct'].keys()))
            dinner_position = random.choice(list(jcts_data['dinner_jct'].keys()))
            supper_position = random.choice(list(jcts_data['supper_jct'].keys()))

            text_diet = "<b>–ó–∞–≤—Ç—Ä–∞–∫:</b>\n" \
                        f"{breakfast_position} ‚Üí <a href='{jcts_data['breakfast_jct'][breakfast_position]}'>—Ä–µ—Ü–µ–ø—Ç</a>\n\n" \
                        f"<b>–û–±–µ–¥:</b>\n" \
                        f"{dinner_position} ‚Üí <a href='{jcts_data['dinner_jct'][dinner_position]}'>—Ä–µ—Ü–µ–ø—Ç</a>\n\n" \
                        f"<b>–£–∂–∏–Ω:</b>\n" \
                        f"{supper_position} ‚Üí <a href='{jcts_data['supper_jct'][supper_position]}'>—Ä–µ—Ü–µ–ø—Ç</a>"
            bot.send_message(message.chat.id, text_diet, parse_mode='html')

    except KeyError:
        sorry_text = "<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –∑–∞–ø—É—Ç–∞–ª—Å—è...</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        bot.send_message(message.chat.id, sorry_text, parse_mode='html')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–¥–∏–∞–±–µ—Ç üíâ")
        item2 = types.KeyboardButton("–∏—Ä ü©∏")
        item3 = types.KeyboardButton("–ø—Ä–æ–±–ª–µ–º—ã —Å –∂–∫—Ç üíä")
        item4 = types.KeyboardButton("—Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö üìù")
        markup.add(item1, item2, item3, item4)
        bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>', reply_markup=markup, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '—Ç–∞–±–ª–∏—Ü–∞ –ì–ò')
def table_gi(message):
    with open('./images/table_gi.png', 'rb') as photo:
        bot.send_photo(message.chat.id, photo)
        bot.send_message(message.chat.id, messages_data['services_info']['gi'])


@bot.message_handler(func=lambda message: message.text == '—á—Ç–æ –Ω–µ–ª—å–∑—è ‚ùå')
def cannot(message):
    try:
        if chapter[message.from_user.id] == 0:
            bot.send_message(message.chat.id, messages_data['cannot_dia'], parse_mode='html')
        elif chapter[message.from_user.id] == 1:
            bot.send_message(message.chat.id, messages_data['cannot_irt'], parse_mode='html')
    except KeyError:
        sorry_text = "<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –∑–∞–ø—É—Ç–∞–ª—Å—è...</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        bot.send_message(message.chat.id, sorry_text, parse_mode='html')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–¥–∏–∞–±–µ—Ç üíâ")
        item2 = types.KeyboardButton("–∏—Ä ü©∏")
        item3 = types.KeyboardButton("–ø—Ä–æ–±–ª–µ–º—ã —Å –∂–∫—Ç üíä")
        item4 = types.KeyboardButton("—Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö üìù")
        markup.add(item1, item2, item3, item4)
        bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>', reply_markup=markup, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–∏—Ä ü©∏')
def irt(message):
    global chapter
    chapter[message.from_user.id] = 1

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("—Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å")
    item2 = types.KeyboardButton("—Ç–∞–±–ª–∏—Ü–∞ –ì–ò")
    item3 = types.KeyboardButton("—á—Ç–æ –Ω–µ–ª—å–∑—è ‚ùå")
    item4 = types.KeyboardButton("–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí")
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, messages_data['irt_text'], reply_markup=markup, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí')
def main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–¥–∏–∞–±–µ—Ç üíâ")
    item2 = types.KeyboardButton("–∏—Ä ü©∏")
    item3 = types.KeyboardButton("–ø—Ä–æ–±–ª–µ–º—ã —Å –∂–∫—Ç üíä")
    item4 = types.KeyboardButton("—Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö üìù")
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>', reply_markup=markup, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–ø—Ä–æ–±–ª–µ–º—ã —Å –∂–∫—Ç üíä')
def jct(message):
    global chapter
    chapter[message.from_user.id] = 2

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("—Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å")
    item2 = types.KeyboardButton("–ø—Ä–æ –≥–ª—é—Ç–µ–Ω")
    item3 = types.KeyboardButton("–ø—Ä–æ –ª–∞–∫—Ç–æ–∑—É")
    item4 = types.KeyboardButton("–ø—Ä–æ —Å–∞—Ö–∞—Ä")
    item5 = types.KeyboardButton("–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí")
    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id, messages_data['jct_text'], reply_markup=markup, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–ø—Ä–æ –≥–ª—é—Ç–µ–Ω')
def gluten(message):
    bot.send_message(message.chat.id, messages_data['gluten_text'], parse_mode='html')
    with open('./images/gluten.png', 'rb') as photo:
        bot.send_photo(message.chat.id, photo)


@bot.message_handler(func=lambda message: message.text == '—Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö üìù')
def advices(message):
    global chapter
    chapter[message.from_user.id] = 3

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–±–∞–∑–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã")
    item2 = types.KeyboardButton("–ø–µ–π –±–æ–ª—å—à–µ –≤–æ–¥—ã")
    item3 = types.KeyboardButton("–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫—É—à–∞–π")
    item4 = types.KeyboardButton("–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Ü–∏–æ–Ω")
    item5 = types.KeyboardButton("–≤–∏—Ç–∞–º–∏–Ω—ã")
    item6 = types.KeyboardButton("–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí")
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(message.chat.id, messages_data['advices_text'], reply_markup=markup, parse_mode='html')


simple_messages = {
    '–ø–µ–π –±–æ–ª—å—à–µ –≤–æ–¥—ã': 'drink_text',
    '–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫—É—à–∞–π': 'eating_text',
    '–ø—Ä–æ –ª–∞–∫—Ç–æ–∑—É': 'lactose_text',
    '–ø—Ä–æ —Å–∞—Ö–∞—Ä': 'sugar_text',
    '—Å–∞—Ö–∞—Ä–æ–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏': 'sugar_dia',
    '—á—Ç–æ –º–æ–∂–Ω–æ ‚úÖ': 'good_dia',
    '–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Ü–∏–æ–Ω': ['services_info', 'planning']
}


@bot.message_handler(func=lambda message: message.text in simple_messages)
def send_simple_messages(message):
    message_key = simple_messages[message.text]
    if type(message_key) == 'list' and len(message_key) == 2:
        bot.send_message(message.chat.id, messages_data[message_key[0]][message_key[1]], parse_mode='html')
    else:
        bot.send_message(message.chat.id, messages_data[simple_messages[message.text]], parse_mode='html')


@bot.message_handler(func=lambda message: '–¥–µ—Ñ–∏—Ü–∏—Ç' in message.text)
def send_about_deficit(message):
    vitamin = message.text.split(' ')
    if vitamin == 'B':
        for B in [1, 2, 3, 5, 6, 7, 8, 9, 12]:
            bot.send_message(message.chat.id, messages_data['vitamins'][f'B_{B}'], parse_mode='html')
    else:
        bot.send_message(message.chat.id, str(messages_data['vitamins'][vitamin]), parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–≤–∏—Ç–∞–º–∏–Ω—ã')
def vitamins(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–¥–µ—Ñ–∏—Ü–∏—Ç A")
    item2 = types.KeyboardButton("–¥–µ—Ñ–∏—Ü–∏—Ç B")
    item3 = types.KeyboardButton("–¥–µ—Ñ–∏—Ü–∏—Ç C")
    item4 = types.KeyboardButton("–¥–µ—Ñ–∏—Ü–∏—Ç D")
    item5 = types.KeyboardButton("–¥–µ—Ñ–∏—Ü–∏—Ç E")
    item6 = types.KeyboardButton("–¥–µ—Ñ–∏—Ü–∏—Ç K")
    item7 = types.KeyboardButton("–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí")
    markup.add(item1, item2, item3, item4, item5, item6, item7)

    bot.send_message(message.chat.id, messages_data['vitamins']['main'], reply_markup=markup, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–±–∞–∑–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã')
def analysis(message):
    bot.send_message(message.chat.id, messages_data['services_info']['analysis'], parse_mode='html')
    with open('./images/analysis.png', 'rb') as photo:
        bot.send_photo(message.chat.id, photo)


while True:
    try:
        bot.polling(non_stop=True, interval=0)
    except Exception as e:
        print(e)
        time.sleep(5)
        continue
# bot.polling(none_stop=True, timeout=30, interval=0)
